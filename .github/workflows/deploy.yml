name: Build, Scan & Deploy to AKS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  REGISTRY_NAME: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  NAMESPACE: typescript-namespace
  IMAGE_NAME: typescript

jobs:
  build:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.build-info.outputs.image-tag }}
      image-full: ${{ steps.build-info.outputs.image-full }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate build info
      id: build-info
      run: |
        # Use GitHub run number and short SHA for unique image tag
        BUILD_ID="${GITHUB_RUN_NUMBER}-${GITHUB_SHA::8}"
        IMAGE_TAG="${BUILD_ID}"
        IMAGE_FULL="${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "image-full=${IMAGE_FULL}" >> $GITHUB_OUTPUT
        echo "build-id=${BUILD_ID}" >> $GITHUB_OUTPUT
        
        echo "üèóÔ∏è Building image: ${IMAGE_FULL}"
    
    - name: Setup Azure CLI
      run: |
        echo "üîß Installing Azure CLI..."
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        echo "üîê Logging into Azure Container Registry..."
        az acr login --name $(echo ${{ secrets.REGISTRY_LOGIN_SERVER }} | cut -d'.' -f1)
        
        # Alternative Docker login method
        echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY_LOGIN_SERVER }} \
          --username ${{ secrets.REGISTRY_USERNAME }} \
          --password-stdin
    
    - name: Build Docker image
      run: |
        echo "üèóÔ∏è Building Docker image..."
        docker build -t ${{ steps.build-info.outputs.image-full }} .
        
        echo "‚úÖ Image built successfully: ${{ steps.build-info.outputs.image-full }}"
        docker images | grep ${{ env.IMAGE_NAME }}
    
    # Manual Trivy installation
    - name: Install Trivy
      run: |
        echo "üì¶ Installing Trivy manually..."
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        
        # Add Trivy repository
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        
        # Install Trivy
        sudo apt-get update
        sudo apt-get install trivy -y
        
        # Verify installation
        trivy version
    
    # Trivy security scan with aquasecurity/trivy-action
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.build-info.outputs.image-full }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        timeout: '10m'
      env:
        TRIVY_DB_REPOSITORY: 'ghcr.io/aquasecurity/trivy-db'
    
    # Additional Trivy scan for SARIF format (for GitHub Security tab)
    - name: Run Trivy scanner for SARIF
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.build-info.outputs.image-full }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        timeout: '10m'
      continue-on-error: true
      env:
        TRIVY_DB_REPOSITORY: 'ghcr.io/aquasecurity/trivy-db'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    # Manual Trivy scan with detailed output
    - name: Manual Trivy security scan
      run: |
        echo "üîç Running comprehensive Trivy security scan..."
        
        # Scan for critical and high vulnerabilities
        echo "## Critical and High Vulnerabilities" > trivy-report.md
        trivy image --format table --severity CRITICAL,HIGH \
          --ignore-unfixed \
          --exit-code 0 \
          ${{ steps.build-info.outputs.image-full }} >> trivy-report.md || true
        
        # Scan for secrets
        echo -e "\n## Secret Scan" >> trivy-report.md
        trivy image --scanners secret --format table \
          --exit-code 0 \
          ${{ steps.build-info.outputs.image-full }} >> trivy-report.md || true
        
        # Display summary
        echo "üìã Security Scan Summary:"
        cat trivy-report.md
        
        # Final scan with exit code for pipeline control
        echo "üö® Final security validation..."
        trivy image --format table --severity CRITICAL,HIGH \
          --ignore-unfixed \
          --exit-code 1 \
          ${{ steps.build-info.outputs.image-full }}
    
    - name: Push image to ACR
      if: success()
      run: |
        echo "üöÄ Pushing image to Azure Container Registry..."
        docker push ${{ steps.build-info.outputs.image-full }}
        echo "‚úÖ Image pushed successfully"
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          trivy-report.md
        retention-days: 30

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    environment: 
      name: production
      url: https://your-app-url.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Setup Azure CLI
      run: |
        echo "üîß Installing Azure CLI..."
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Get AKS credentials
      run: |
        echo "üîó Getting AKS credentials..."
        az aks get-credentials \
          --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_CLUSTER_NAME }} \
          --overwrite-existing
        
        # Verify connection
        kubectl cluster-info
        kubectl get nodes
    
    - name: Create namespace if not exists
      run: |
        echo "üèóÔ∏è Ensuring namespace exists..."
        if ! kubectl get namespace ${{ env.NAMESPACE }} 2>/dev/null; then
          echo "Creating namespace: ${{ env.NAMESPACE }}"
          kubectl apply -f k8s/namespace.yaml
        else
          echo "Namespace ${{ env.NAMESPACE }} already exists"
        fi
    
    - name: Deploy ConfigMaps and Secrets
      run: |
        echo "‚öôÔ∏è Deploying ConfigMaps and Secrets..."
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
    
    - name: Update deployment with new image
      run: |
        echo "üîÑ Updating deployment with image: ${{ needs.build.outputs.image-full }}"
        
        # Replace image tag in deployment
        sed -i "s|image: typescript:latest|image: ${{ needs.build.outputs.image-full }}|g" k8s/deployment.yaml
        
        # Verify the replacement
        grep "image:" k8s/deployment.yaml
    
    - name: Deploy to AKS
      run: |
        echo "üöÄ Deploying application to AKS..."
        
        # Deploy all Kubernetes resources
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/network-policy.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/pdb.yaml
        
        echo "‚úÖ Deployment completed"
    
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Wait for rollout to complete
        kubectl rollout status deployment/typescript-app-deployment -n ${{ env.NAMESPACE }} --timeout=600s
        
        # Check pod status
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=typescript-app
        
        # Check service
        kubectl get svc -n ${{ env.NAMESPACE }}
        
        # Check HPA
        kubectl get hpa -n ${{ env.NAMESPACE }}
        
        echo "‚úÖ Verification completed"
    
    - name: Run post-deployment tests
      run: |
        echo "üß™ Running post-deployment tests..."
        
        # Get service endpoint
        SERVICE_IP=$(kubectl get svc typescript-app-service -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.clusterIP}')
        echo "Service IP: $SERVICE_IP"
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=typescript-app -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Test health endpoint from within cluster
        kubectl run test-pod --rm -i --restart=Never --image=curlimages/curl:latest -- \
          curl -f "http://typescript-app-service.${{ env.NAMESPACE }}.svc.cluster.local/health" || \
          echo "Health check endpoint not available (this might be expected)"
        
        echo "‚úÖ Post-deployment tests completed"
    
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "üßπ Cleaning up failed deployment..."
        kubectl rollout undo deployment/typescript-app-deployment -n ${{ env.NAMESPACE }} || true
        echo "Rollback initiated"

    - name: Deployment summary
      if: always()
      run: |
        echo "üìä Deployment Summary:"
        echo "- Image: ${{ needs.build.outputs.image-full }}"
        echo "- Namespace: ${{ env.NAMESPACE }}"
        echo "- Status: $(kubectl rollout status deployment/typescript-app-deployment -n ${{ env.NAMESPACE }} || echo 'Failed')"
        
        # Show current deployment info
        kubectl describe deployment typescript-app-deployment -n ${{ env.NAMESPACE }} || true
